server.port=8080
#spring.datasource.url=
#spring.datasource.username=
#spring.datasource.password=
spring.jpa.show-sql=true


#spring.mail.host=smtp.naver.com
#spring.mail.port=465
#spring.mail.username=
#spring.mail.password=
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.timeout=5000
#spring.mail.properties.mail.smtp.starttls.enable=true
#spring.mail.properties.mail.smtp.starttls.required=true

logging.level.org.springframework=INFO
logging.level.org.hibernate=INFO

# Properties 파일 - Thymeleaf 설정
spring.thymeleaf.enabled=true
spring.thymeleaf.cache=false
spring.thymeleaf.check-template-location=true
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

#spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy

#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
spring.jpa.hibernate.ddl-auto=validate
#https://colabear754.tistory.com/136여기에 자세히 설명함

#create:    단어 그대로 엔티티로 등록된 클래스와 매핑되는 테이블을 자동으로 생성(create)해준다. 
			#이 과정에서 기존에 해당 클래스와 매핑되는 테이블이 존재한다면 기존 테이블을 삭제(drop)하고 테이블을 생성한다.

#validate:  다른 속성들과는 다르게 DDL을 작성하여 테이블을 생성하거나 수정하지 않고, 엔티티 클래스와 테이블이 정상적으로 매핑되는지만
             # 검사한다. 만약 테이블이 아예 존재하지 않거나, 테이블에 엔티티의 필드에 매핑되는 컬럼이 존재하지 않으면 
             # 예외를 발생시키면서 애플리케이션을 종료한다.	

#none : 아무 일도 일어나지 않는다.

